Pass
{
	Tags{"LightMode" = "LightweightForward"}

	// Material options generated by graph
${Tags}
${Blending}
${Culling}
${ZTest}
${ZWrite}
	HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma exclude_renderers d3d11_9x
    #pragma target 2.0

	// -------------------------------------
    // Lightweight Pipeline keywords
    #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
    #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
    #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
    #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
    #pragma multi_compile _ _SHADOWS_SOFT
    #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
    
	// -------------------------------------
    // Unity defined keywords
    #pragma multi_compile _ DIRLIGHTMAP_COMBINED
    #pragma multi_compile _ LIGHTMAP_ON
    #pragma multi_compile_fog

    //--------------------------------------
    // GPU Instancing
    #pragma multi_compile_instancing

    #pragma vertex vert
	#pragma fragment frag

	// Defines generated by graph
${Defines}
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"


    // defines for UTS2
    #define UCTS_LWRP 1

    #define fixed  half
    #define fixed3 half3
    #define fixed4 half4

    #define _WorldSpaceLightPos0 _MainLightPosition
    #define _LightColor0 _MainLightColor
    #ifndef DIRECTIONAL
    # define DIRECTIONAL
    #endif
    // defines for UTS2
${Graph}
	struct GraphVertexOutput
    {
        float4 clipPos                : SV_POSITION;
        DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
    	float4 shadowCoord            : TEXCOORD2;

		// Interpolators defined by graph
${VertexOutputStruct}
        UNITY_VERTEX_INPUT_INSTANCE_ID
    	UNITY_VERTEX_OUTPUT_STEREO
    };



//            uniform sampler2D _MainTex; uniform float4 _MainTex_ST;
            uniform float4 _BaseColor;

            //v.2.0.5
            uniform float4 _Color;
            uniform half _Use_BaseAs1st;
            uniform half _Use_1stAs2nd;
            //
            uniform half _Is_LightColor_Base;
            uniform sampler2D _1st_ShadeMap; uniform float4 _1st_ShadeMap_ST;
            uniform float4 _1st_ShadeColor;
            uniform half _Is_LightColor_1st_Shade;
            uniform sampler2D _2nd_ShadeMap; uniform float4 _2nd_ShadeMap_ST;
            uniform float4 _2nd_ShadeColor;
            uniform half _Is_LightColor_2nd_Shade;
            uniform sampler2D _NormalMap; uniform float4 _NormalMap_ST;
            uniform half _Is_NormalMapToBase;
            uniform half _Set_SystemShadowsToBase;
            uniform float _Tweak_SystemShadowsLevel;
            uniform float _BaseColor_Step;
            uniform float _BaseShade_Feather;
            uniform sampler2D _Set_1st_ShadePosition; uniform float4 _Set_1st_ShadePosition_ST;
            uniform float _ShadeColor_Step;
            uniform float _1st2nd_Shades_Feather;
            uniform sampler2D _Set_2nd_ShadePosition; uniform float4 _Set_2nd_ShadePosition_ST;
            uniform float4 _HighColor;
            uniform sampler2D _HighColor_Tex; uniform float4 _HighColor_Tex_ST;
            uniform half _Is_LightColor_HighColor;
            uniform half _Is_NormalMapToHighColor;
//            uniform float _HighColor_Power;
            uniform half _Is_SpecularToHighColor;
            uniform half _Is_BlendAddToHiColor;
            uniform half _Is_UseTweakHighColorOnShadow;
            uniform float _TweakHighColorOnShadow;
            uniform sampler2D _Set_HighColorMask; uniform float4 _Set_HighColorMask_ST;
            uniform float _Tweak_HighColorMaskLevel;
            uniform half _RimLight;
            uniform float4 _RimLightColor;
            uniform half _Is_LightColor_RimLight;
            uniform half _Is_NormalMapToRimLight;
            uniform float _RimLight_Power;
            uniform float _RimLight_InsideMask;
            uniform half _RimLight_FeatherOff;
            uniform half _LightDirection_MaskOn;
            uniform float _Tweak_LightDirection_MaskLevel;
            uniform half _Add_Antipodean_RimLight;
            uniform float4 _Ap_RimLightColor;
            uniform half _Is_LightColor_Ap_RimLight;
            uniform float _Ap_RimLight_Power;
            uniform half _Ap_RimLight_FeatherOff;
            uniform sampler2D _Set_RimLightMask; uniform float4 _Set_RimLightMask_ST;
            uniform float _Tweak_RimLightMaskLevel;
            uniform half _MatCap;
            uniform sampler2D _MatCap_Sampler; uniform float4 _MatCap_Sampler_ST;
            uniform float4 _MatCapColor;
            uniform half _Is_LightColor_MatCap;
            uniform half _Is_BlendAddToMatCap;
            uniform float _Tweak_MatCapUV;
            uniform float _Rotate_MatCapUV;
            uniform half _Is_NormalMapForMatCap;
            uniform sampler2D _NormalMapForMatCap; uniform float4 _NormalMapForMatCap_ST;
            uniform float _Rotate_NormalMapForMatCapUV;
            uniform half _Is_UseTweakMatCapOnShadow;
            uniform float _TweakMatCapOnShadow;
            //MatcapMask
            uniform sampler2D _Set_MatcapMask; uniform float4 _Set_MatcapMask_ST;
            uniform float _Tweak_MatcapMaskLevel;
            //v.2.0.5
            uniform half _Is_Ortho;
            //v.2.0.6
            uniform float _CameraRolling_Stabilizer;
            uniform half _BlurLevelMatcap;
            uniform half _Inverse_MatcapMask;
#if UCTS_LWRP
#else
            uniform float _BumpScale;
#endif
            uniform float _BumpScaleMatcap;
            //Emissive
            uniform sampler2D _Emissive_Tex; uniform float4 _Emissive_Tex_ST;
            uniform float4 _Emissive_Color;
            //v.2.0.7
            uniform half _Is_ViewCoord_Scroll;
            uniform float _Rotate_EmissiveUV;
            uniform float _Base_Speed;
            uniform float _Scroll_EmissiveU;
            uniform float _Scroll_EmissiveV;
            uniform half _Is_PingPong_Base;
            uniform float4 _ColorShift;
            uniform float4 _ViewShift;
            uniform float _ColorShift_Speed;
            uniform half _Is_ColorShift;
            uniform half _Is_ViewShift;
            uniform float3 emissive;
            // 
            uniform float _Unlit_Intensity;
            //v.2.0.5
            uniform half _Is_Filter_HiCutPointLightColor;
            uniform half _Is_Filter_LightColor;
            //v.2.0.4.4
            uniform float _StepOffset;
            uniform half _Is_BLD;
            uniform float _Offset_X_Axis_BLD;
            uniform float _Offset_Y_Axis_BLD;
            uniform half _Inverse_Z_Axis_BLD;
            uniform float _GI_Intensity;
//v.2.0.4
#ifdef _IS_CLIPPING_MODE
//DoubleShadeWithFeather_Clipping
            uniform sampler2D _ClippingMask; uniform float4 _ClippingMask_ST;
            uniform float _Clipping_Level;
            uniform half _Inverse_Clipping;
#elif _IS_CLIPPING_TRANSMODE
//DoubleShadeWithFeather_TransClipping
            uniform sampler2D _ClippingMask; uniform float4 _ClippingMask_ST;
            uniform half _IsBaseMapAlphaAsClippingMask;
            uniform float _Clipping_Level;
            uniform half _Inverse_Clipping;
            uniform float _Tweak_transparency;
#elif _IS_CLIPPING_OFF


//DoubleShadeWithFeather
#endif

inline float GammaToLinearSpaceExact(float value)
{
	if (value <= 0.04045F)
		return value / 12.92F;
	else if (value < 1.0F)
		return pow((value + 0.055F) / 1.055F, 2.4F);
	else
		return pow(value, 2.2F);
}

inline half3 GammaToLinearSpace(half3 sRGB)
{
	// Approximate version from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1
	return sRGB * (sRGB * (sRGB * 0.305306011h + 0.682171111h) + 0.012522878h);

	// Precise version, useful for debugging.
	//return half3(GammaToLinearSpaceExact(sRGB.r), GammaToLinearSpaceExact(sRGB.g), GammaToLinearSpaceExact(sRGB.b));
}

inline float LinearToGammaSpaceExact(float value)
{
	if (value <= 0.0F)
		return 0.0F;
	else if (value <= 0.0031308F)
		return 12.92F * value;
	else if (value < 1.0F)
		return 1.055F * pow(value, 0.4166667F) - 0.055F;
	else
		return pow(value, 0.45454545F);
}

inline half3 LinearToGammaSpace(half3 linRGB)
{
	linRGB = max(linRGB, half3(0.h, 0.h, 0.h));
	// An almost-perfect approximation from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1
	return max(1.055h * pow(linRGB, 0.416666667h) - 0.055h, 0.h);

	// Exact version, useful for debugging.
	//return half3(LinearToGammaSpaceExact(linRGB.r), LinearToGammaSpaceExact(linRGB.g), LinearToGammaSpaceExact(linRGB.b));
}

    GraphVertexOutput vert (GraphVertexInput v)
	{
		GraphVertexOutput o = (GraphVertexOutput)0;
        UNITY_SETUP_INSTANCE_ID(v);
    	UNITY_TRANSFER_INSTANCE_ID(v, o);
		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

		// Vertex transformations performed by graph
${VertexShader}
		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

		// Vertex description inputs defined by graph
${VertexShaderDescriptionInputs}
	    VertexDescription vd = PopulateVertexData(vdi);
		v.vertex.xyz = vd.Position;

		// Vertex shader outputs defined by graph
${VertexShaderOutputs}
		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

        VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
        
 		// We either sample GI from lightmap or SH.
	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
        // see DECLARE_LIGHTMAP_OR_SH macro.
	    // The following funcions initialize the correct variable with correct data
	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
	    OUTPUT_SH(lwWNormal, o.vertexSH);

	    half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
	    half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
	    o.clipPos = vertexInput.positionCS;

	#ifdef _MAIN_LIGHT_SHADOWS
		o.shadowCoord = GetShadowCoord(vertexInput);
	#endif
		return o;
	}

	half4 frag (GraphVertexOutput IN ${FaceSign}) : SV_Target
    {
    	UNITY_SETUP_INSTANCE_ID(IN);
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

		// Pixel transformations performed by graph
${PixelShader}
        SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
${PixelShaderSurfaceInputs}
        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo0 = float3(0.5, 0.5, 0.5);
		float3 Albedo1 = float3(0.5, 0.5, 0.5);
		float3 Albedo2 = float3(0.5, 0.5, 0.5);
		float3 HiColor = float3(1.0, 1.0, 1.0);
 		float BaseColorStep = 0.8; 
        float ShadeColorStep = 0.5;
		float SpecularPower = 0.35f;

        float3 RimLightColor = float3(1.0, 1.0, 1.0);
        float RimLightLevel  = 0.0;
        float RimLightPower  = 0.35;

		float GiIntensity = 0.0;
		float3 Specular = float3(0, 0, 0);
		float Metallic = 1;
		float3 Normal = float3(0, 0, 1);
		float3 Emission = 0;
		float Smoothness = 0.5;
		float Occlusion = 1;
		float Alpha = 1;
		float AlphaClipThreshold = 0;
		float IsLightColorBase = 0;
        float IsLightColor1stShade = 0;
        float IsLightColor2ndShade = 0;

        float IsLightColorHighColor = 0;
        float IsSpecularToHighColor = 0;

		float UnlitIntensity = 0;
		// Surface description remap performed by graph
${PixelShaderSurfaceRemap}
		InputData inputData;
		inputData.positionWS = WorldSpacePosition;

#ifdef _NORMALMAP
	    inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
#else
    #if !SHADER_HINT_NICE_QUALITY
        inputData.normalWS = WorldSpaceNormal;
    #else
	    inputData.normalWS = normalize(WorldSpaceNormal);
    #endif
#endif

#if !SHADER_HINT_NICE_QUALITY
	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
	    inputData.viewDirectionWS = WorldSpaceViewDirection;
#else
	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
#endif

	    inputData.shadowCoord = IN.shadowCoord;

	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

		// ------------------ UTS2 code from here -------------------------
// _Is_LightColor_Base = 1.0f;
//        _Unlit_Intensity = 1.0f;
// _Is_LightColor_1st_Shade = 1.0f;
// _Is_LightColor_2nd_Shade = 1.0f;
		_Is_LightColor_RimLight = 0.0f;
//		_GI_Intensity = 1.0f;
//		_RimLight = 1.0f;
//		_RimLight_Power = 0.35f;
//		_RimLightColor = float4(1.0,1.0,1.0,1.0);
// 		_BaseColor_Step = 0.8; // test.
//      _ShadeColor_Step = 0.5;
//		_HighColor = float4(1.0,1.0,1.0,1.0);
//		_HighColor_Power = 0.35;
		_Tweak_HighColorMaskLevel = 0.136;

//		Albedo0 = LinearToGammaSpace(Albedo0);
//		Albedo1 = LinearToGammaSpace(Albedo1);
//		Albedo2 = LinearToGammaSpace(Albedo2);
        float3 i_normalDir = normalize(inputData.normalWS);
		float3 viewDirection = inputData.viewDirectionWS;
		float3x3 tangentTransform = float3x3( WorldSpaceTangent, WorldSpaceBiTangent, i_normalDir);
        float3 normalDirection = normalize(mul( Normal, tangentTransform )); // Perturbed normals
        float2 Set_UV0 = IN.uv1.xy;

		BRDFData brdfData;
		InitializeBRDFData(Albedo0, 
			Metallic, 
			Specular, 
			Smoothness,
			Alpha, brdfData);

		half3 envColor = GlobalIllumination(brdfData, inputData.bakedGI, Occlusion, inputData.normalWS, inputData.viewDirectionWS);
		envColor *= 1.8f;

		half attenuation = 1.0;
# ifdef _MAIN_LIGHT_SHADOWS
		Light mainLight = GetMainLight(IN.shadowCoord);
//		attenuation = mainLight.distanceAttenuation; 
		attenuation = mainLight.shadowAttenuation;
# endif

        float3 defaultLightDirection = normalize(UNITY_MATRIX_V[2].xyz + UNITY_MATRIX_V[1].xyz);
        //v.2.0.5
        float3 defaultLightColor = float3(0.0,0.0,0.0); // todo.
        float3 customLightDirection = normalize(mul( unity_ObjectToWorld, float4(((float3(1.0,0.0,0.0)*_Offset_X_Axis_BLD*10)+(float3(0.0,1.0,0.0)*_Offset_Y_Axis_BLD*10)+(float3(0.0,0.0,-1.0)*lerp(-1.0,1.0,_Inverse_Z_Axis_BLD))),0)).xyz);
        float3 lightDirection = normalize(lerp(defaultLightDirection,_WorldSpaceLightPos0.xyz,any(_WorldSpaceLightPos0.xyz)));
        lightDirection = lerp(lightDirection, customLightDirection, _Is_BLD);
		half3 originalLightColor = _LightColor0.rgb;

		float3 lightColor = lerp(max(defaultLightColor, originalLightColor), max(defaultLightColor, saturate(originalLightColor)), _Is_Filter_LightColor);
        float3 halfDirection = normalize(viewDirection+lightDirection);
		float4 _MainTex_var = float4(1.0f,1.0f,1.0f,1.0f);
         //v.2.0.5
		_BaseColor = float4(Albedo0,1.0f);
        _Color = _BaseColor;
        float3 Set_LightColor = lightColor.rgb;
        float3 Set_BaseColor = lerp( (_BaseColor.rgb*_MainTex_var.rgb), ((_BaseColor.rgb*_MainTex_var.rgb)*Set_LightColor), IsLightColorBase );

		
        //v.2.0.5
        float4 _1st_ShadeMap_var = float4(1.0f,1.0f,1.0f,1.0f);
		_1st_ShadeColor = float4(Albedo1,1.0f);
        float3 Set_1st_ShadeColor = lerp( (_1st_ShadeColor.rgb*_1st_ShadeMap_var.rgb), ((_1st_ShadeColor.rgb*_1st_ShadeMap_var.rgb)*Set_LightColor), IsLightColor1stShade );
        //v.2.0.5
        float4 _2nd_ShadeMap_var = float4(1.0f,1.0f,1.0f,1.0f);
		_2nd_ShadeColor = float4(Albedo2,1.0f);
        float3 Set_2nd_ShadeColor = lerp( (_2nd_ShadeColor.rgb*_2nd_ShadeMap_var.rgb), ((_2nd_ShadeColor.rgb*_2nd_ShadeMap_var.rgb)*Set_LightColor), IsLightColor2ndShade );
        float _HalfLambert_var = 0.5*dot(lerp( i_normalDir, normalDirection, _Is_NormalMapToBase ),lightDirection)+0.5;

        float4 _Set_2nd_ShadePosition_var = float4(1.0,1.0,1.0,1.0);
        float4 _Set_1st_ShadePosition_var = float4(1.0,1.0,1.0,1.0);
        //v.2.0.6
        //Minmimum value is same as the Minimum Feather's value with the Minimum Step's value as threshold.
        float _SystemShadowsLevel_var = (attenuation*0.5)+0.5+_Tweak_SystemShadowsLevel > 0.001 ? (attenuation*0.5)+0.5+_Tweak_SystemShadowsLevel : 0.0001;
//        float Set_FinalShadowMask = saturate((1.0 + ( (lerp( _HalfLambert_var, _HalfLambert_var*saturate(_SystemShadowsLevel_var), _Set_SystemShadowsToBase ) - (_BaseColor_Step-_BaseShade_Feather)) * ((1.0 - _Set_1st_ShadePosition_var.rgb).r - 1.0) ) / (_BaseColor_Step - (_BaseColor_Step-_BaseShade_Feather))));
          float Set_FinalShadowMask = saturate((1.0 + ( (lerp( _HalfLambert_var, _HalfLambert_var*saturate(_SystemShadowsLevel_var), _Set_SystemShadowsToBase ) - (BaseColorStep-_BaseShade_Feather)) * ((1.0 - _Set_1st_ShadePosition_var.rgb).r - 1.0) ) / (BaseColorStep - (BaseColorStep-_BaseShade_Feather))));


 // 		float3 Set_FinalBaseColor = lerp(Set_BaseColor,lerp(Set_1st_ShadeColor,Set_2nd_ShadeColor,saturate((1.0 + ( (_HalfLambert_var - (_ShadeColor_Step-_1st2nd_Shades_Feather)) * ((1.0 - _Set_2nd_ShadePosition_var.rgb).r - 1.0) ) / (_ShadeColor_Step - (_ShadeColor_Step-_1st2nd_Shades_Feather))))),Set_FinalShadowMask); // Final Color
 		float3 Set_FinalBaseColor = lerp(Set_BaseColor,lerp(Set_1st_ShadeColor,Set_2nd_ShadeColor,saturate((1.0 + ( (_HalfLambert_var - (ShadeColorStep-_1st2nd_Shades_Feather)) * ((1.0 - _Set_2nd_ShadePosition_var.rgb).r - 1.0) ) / (ShadeColorStep - (ShadeColorStep-_1st2nd_Shades_Feather))))),Set_FinalShadowMask); // Final Color

        float4 _Set_HighColorMask_var = float4(1.0,1.0,1.0,1.0); // tex2D(_Set_HighColorMask,TRANSFORM_TEX(Set_UV0, _Set_HighColorMask));
        float _Specular_var = 0.5*dot(halfDirection,lerp( i_normalDir, normalDirection, _Is_NormalMapToHighColor ))+0.5; //  Specular                
        float _TweakHighColorMask_var = (saturate((_Set_HighColorMask_var.g+_Tweak_HighColorMaskLevel))*lerp( (1.0 - step(_Specular_var,(1.0 - pow(SpecularPower,5)))), pow(_Specular_var,exp2(lerp(11,1,SpecularPower))), IsSpecularToHighColor ));

//        float4 _HighColor_Tex_var = float4(1.0,1.0,1.0,1.0); // tex2D(_HighColor_Tex,TRANSFORM_TEX(Set_UV0, _HighColor_Tex));
//        float3 _HighColor_var = (lerp( (_HighColor_Tex_var.rgb*_HighColor.rgb), ((_HighColor_Tex_var.rgb*_HighColor.rgb)*Set_LightColor), IsLightColorHighColor )*_TweakHighColorMask_var);
        float3 _HighColor_var = (lerp( (HiColor), ((HiColor)*Set_LightColor), IsLightColorHighColor )*_TweakHighColorMask_var);

        //Composition: 3 Basic Colors and HighColor as Set_HighColor
        float3 Set_HighColor = (lerp( saturate((Set_FinalBaseColor-_TweakHighColorMask_var)), Set_FinalBaseColor, lerp(_Is_BlendAddToHiColor,1.0,IsSpecularToHighColor) )+lerp( _HighColor_var, (_HighColor_var*((1.0 - Set_FinalShadowMask)+(Set_FinalShadowMask*_TweakHighColorOnShadow))), _Is_UseTweakHighColorOnShadow ));
 
        float4 _Set_RimLightMask_var = float4(1.0f,1.0f,1.0f,1.0f);
        float3 _Is_LightColor_RimLight_var = lerp( RimLightColor.rgb, (RimLightColor.rgb*Set_LightColor), _Is_LightColor_RimLight );
        float _RimArea_var = (1.0 - dot(lerp( i_normalDir, normalDirection, _Is_NormalMapToRimLight ),viewDirection));
        float _RimLightPower_var = pow(_RimArea_var,exp2(lerp(3,0,RimLightPower)));
        float _Rimlight_InsideMask_var = saturate(lerp( (0.0 + ( (_RimLightPower_var - _RimLight_InsideMask) * (1.0 - 0.0) ) / (1.0 - _RimLight_InsideMask)), step(_RimLight_InsideMask,_RimLightPower_var), _RimLight_FeatherOff ));
        float _VertHalfLambert_var = 0.5*dot(i_normalDir,lightDirection)+0.5;
        float3 _LightDirection_MaskOn_var = lerp( (_Is_LightColor_RimLight_var*_Rimlight_InsideMask_var), (_Is_LightColor_RimLight_var*saturate((_Rimlight_InsideMask_var-((1.0 - _VertHalfLambert_var)+_Tweak_LightDirection_MaskLevel)))), _LightDirection_MaskOn );
        float _ApRimLightPower_var = pow(_RimArea_var,exp2(lerp(3,0,_Ap_RimLight_Power)));
        float3 Set_RimLight = (saturate((_Set_RimLightMask_var.g+_Tweak_RimLightMaskLevel))*lerp( _LightDirection_MaskOn_var, (_LightDirection_MaskOn_var+(lerp( _Ap_RimLightColor.rgb, (_Ap_RimLightColor.rgb*Set_LightColor), _Is_LightColor_Ap_RimLight )*saturate((lerp( (0.0 + ( (_ApRimLightPower_var - _RimLight_InsideMask) * (1.0 - 0.0) ) / (1.0 - _RimLight_InsideMask)), step(_RimLight_InsideMask,_ApRimLightPower_var), _Ap_RimLight_FeatherOff )-(saturate(_VertHalfLambert_var)+_Tweak_LightDirection_MaskLevel))))), _Add_Antipodean_RimLight ));
        //Composition: HighColor and RimLight as _RimLight_var
        float3 _RimLight_var = lerp( Set_HighColor, (Set_HighColor+Set_RimLight), RimLightLevel );
        float3 finalColor = _RimLight_var;// Final Composition before Emissive
 

		float3 envLightColor = envColor.rgb;
        float  envLightIntensity = 0.299*envLightColor.r + 0.587*envLightColor.g + 0.114*envLightColor.b <1 ? (0.299*envLightColor.r + 0.587*envLightColor.g + 0.114*envLightColor.b) : 1;

		float3 pointLightColor = 0;
  #ifdef _ADDITIONAL_LIGHTS

		int pixelLightCount = GetAdditionalLightsCount();
		for (int iLight = 0; iLight < pixelLightCount; ++iLight)
		{
			float notDirectional = 1.0f; //_WorldSpaceLightPos0.w of the legacy code.
			Light light = GetAdditionalLight(iLight, inputData.positionWS);
			attenuation = light.distanceAttenuation; 

			float3 lightDirection = light.direction;
			//v.2.0.5: 
			float3 addPassLightColor = (0.5*dot(lerp(i_normalDir, normalDirection, _Is_NormalMapToBase), lightDirection) + 0.5) * light.color.rgb * attenuation;
			float  pureIntencity = max(0.001, (0.299*light.color.r + 0.587*light.color.g + 0.114*light.color.b));
			float3 lightColor = max(0, lerp(addPassLightColor, lerp(0, min(addPassLightColor, addPassLightColor / pureIntencity), notDirectional), _Is_Filter_LightColor));
			float3 halfDirection = normalize(viewDirection + lightDirection); // has to be recalced here.


					//v.2.0.5:
			BaseColorStep = saturate(BaseColorStep + _StepOffset);
			ShadeColorStep = saturate(ShadeColorStep + _StepOffset);

			//
			//v.2.0.5: If Added lights is directional, set 0 as _LightIntensity
			float _LightIntensity = lerp(0, (0.299*light.color.r + 0.587*light.color.g + 0.114*light.color.b)*attenuation, notDirectional);
			//v.2.0.5: Filtering the high intensity zone of PointLights
			float3 Set_LightColor = lerp(lightColor, lerp(lightColor, min(lightColor, light.color.rgb*attenuation*_BaseColor_Step), notDirectional), _Is_Filter_HiCutPointLightColor);
					//
			float3 Set_BaseColor = lerp((_BaseColor.rgb*_MainTex_var.rgb*_LightIntensity), ((_BaseColor.rgb*_MainTex_var.rgb)*Set_LightColor), IsLightColorBase);
			//v.2.0.5
			float4 _1st_ShadeMap_var = float4(1.0f,1.0f,1.0f,1.0f);
			float3 Set_1st_ShadeColor = lerp((_1st_ShadeColor.rgb*_1st_ShadeMap_var.rgb*_LightIntensity), ((_1st_ShadeColor.rgb*_1st_ShadeMap_var.rgb)*Set_LightColor), IsLightColor1stShade);
					//v.2.0.5
			float4 _2nd_ShadeMap_var = float4(1.0f,1.0f,1.0f,1.0f);
			float3 Set_2nd_ShadeColor = lerp((_2nd_ShadeColor.rgb*_2nd_ShadeMap_var.rgb*_LightIntensity), ((_2nd_ShadeColor.rgb*_2nd_ShadeMap_var.rgb)*Set_LightColor), IsLightColor2ndShade);
			float _HalfLambert_var = 0.5*dot(lerp(i_normalDir, normalDirection, _Is_NormalMapToBase), lightDirection) + 0.5;
			float4 _Set_2nd_ShadePosition_var = float4(1.0f,1.0f,1.0f,1.0f);
			float4 _Set_1st_ShadePosition_var = float4(1.0f,1.0f,1.0f,1.0f);

			//v.2.0.5:
			float Set_FinalShadowMask = saturate((1.0 + ((lerp(_HalfLambert_var, (_HalfLambert_var*saturate(1.0 + _Tweak_SystemShadowsLevel)), _Set_SystemShadowsToBase) - (BaseColorStep - _BaseShade_Feather)) * ((1.0 - _Set_1st_ShadePosition_var.rgb).r - 1.0)) / (BaseColorStep - (BaseColorStep - _BaseShade_Feather))));
			//Composition: 3 Basic Colors as finalColor
			float3 finalColor = lerp(Set_BaseColor, lerp(Set_1st_ShadeColor, Set_2nd_ShadeColor, saturate((1.0 + ((_HalfLambert_var - (ShadeColorStep - _1st2nd_Shades_Feather)) * ((1.0 - _Set_2nd_ShadePosition_var.rgb).r - 1.0)) / (ShadeColorStep - (ShadeColorStep - _1st2nd_Shades_Feather))))), Set_FinalShadowMask); // Final Color

			float4 _Set_HighColorMask_var = tex2D(_Set_HighColorMask, TRANSFORM_TEX(Set_UV0, _Set_HighColorMask));
			float _Specular_var =  0.5*dot(halfDirection, lerp(i_normalDir, normalDirection, _Is_NormalMapToHighColor)) + 0.5; //  Specular     
          
			float _TweakHighColorMask_var = (saturate((_Set_HighColorMask_var.g + _Tweak_HighColorMaskLevel))*lerp((1.0 - step(_Specular_var, (1.0 - pow(SpecularPower, 5)))), pow(_Specular_var, exp2(lerp(11, 1, SpecularPower))), IsSpecularToHighColor));
			float4 _HighColor_Tex_var = float4(1.0,1.0,1.0,1.0);
			float3 _HighColor_var = (lerp((_HighColor_Tex_var.rgb*HiColor.rgb), ((_HighColor_Tex_var.rgb*HiColor.rgb)*Set_LightColor), IsLightColorHighColor)*_TweakHighColorMask_var);
#if 1
			finalColor = finalColor + lerp(lerp(_HighColor_var, (_HighColor_var*((1.0 - Set_FinalShadowMask) + (Set_FinalShadowMask*_TweakHighColorOnShadow))), _Is_UseTweakHighColorOnShadow), float3(0, 0, 0), _Is_Filter_HiCutPointLightColor);
			//

			finalColor = saturate(finalColor);
#endif
			pointLightColor += finalColor;

		}
  #endif // _ADDITIONAL_LIGHTS
        //Final Composition#if 
        finalColor =  saturate(finalColor) + (envLightColor*envLightIntensity*GiIntensity*smoothstep(1,0,envLightIntensity/2)) + Emission;

		finalColor += pointLightColor;

		half4 color = half4(finalColor,1.0); //half4(_RimLight_var,1.0);
		// Computes fog factor per-vertex
    	color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

#if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return color;
    }

	ENDHLSL
}
